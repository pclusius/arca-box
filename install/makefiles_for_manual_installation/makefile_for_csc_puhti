# ---------------------------------- NETCDF configuring ---------------------------------------
# To get Netcdf working you need to use system dependent settings
# If you get errors related to LIBNET, this is the place to start troubleshooting

# This seems to be default on Linux Mint/Ubuntu laptop and Windows with Cygwin
# NETLIBS =  -I/usr/include -L/usr/lib/x86_64-linux-gnu/ -lnetcdf  -lnetcdff -lcurl

# On Mac, this might work ---------------------------------------
# NETLIBS = -I/opt/local/include -L/opt/local/lib -L/usr/lib -lnetcdff -lnetcdf -lcurl -lhdf5 -lhdf5_hl

# Or this
# NETLIBS = -I$(NETCDF_INCLUDE) -L$(NETCDF_LIB) -L$(H5_LIB) -lnetcdf -lnetcdff -lcurl -lhdf5 -lhdf5_hl

# On CSC/Puhti ------------------------------------------------------
NETLIBS =  -I/appl/spack/install-tree/gcc-9.1.0/netcdf-fortran-4.4.4-4tj6tj/include \
							-L/appl/spack/install-tree/gcc-9.1.0/netcdf-fortran-4.4.4-4tj6tj/lib -lnetcdff -lnetcdf -lnetcdf

# Load the correct modules before compiling and running:
# module load python-data/3.7.6-1
# module load gcc/9.1.0
# module load netcdf/4.7.0
# module load netcdf-fortran/4.4.4%s
# ------------------------------- end NETCDF configuring ---------------------------------------


# compiler
F90 = gfortran

COPTI = -O2
BOPTI = -O2
# PROF = -pg
PROF =
ACDCTARG =
# Put .o and .mod files here:
OD = build
BACDC = ACDC
SRCDIR = src
CHMDIR = SimpleChem

# USER OTIONS FINISH HERE ==============================================================================================

NAC := $(shell find ${SRCDIR}/ACDC/ACDC_* -maxdepth 0 -type d |wc -l|sed 's/ //g')
n_acdc := $(shell seq $(NAC))

$(shell mkdir -p $(OD)/$(CHMDIR))
$(shell mkdir -p $(OD)/$(BACDC))

# When compiling, search for files in these directories:
VPATH = $(OD):src:Aerosol:$(OD)/$(CHMDIR):$(foreach n,$(n_acdc),src/ACDC/ACDC_0$(n):)
FILE = ModelLib/required/version.txt
VERSION := $(shell head -1 ${FILE})

BOX_OPTS = -g -Wno-unused $(BOPTI) -ffree-line-length-none -cpp -DLINUX -DCHEM=\"$(CHMDIR)\" -DVERSION=\"$(VERSION)\" \
-DNMACDC=\"$(NAC)\" -J$(OD) -I$(OD) -I$(OD)/$(CHMDIR) -I$(OD)/$(BACDC) -fcheck=bounds,do -Wall -Wextra -Wsurprising \
-Wno-unused-dummy-argument -Wno-maybe-uninitialized -Wtabs -Wno-tabs -Wno-character-truncation -fbacktrace \
-ffpe-trap=invalid,zero,overflow $(PROF) -g -fcheck=all

CHEM_OPTS = -w -cpp $(PROF) $(COPTI) -ffree-line-length-none -fcheck=all -ffpe-trap=invalid,zero,overflow -J$(OD)/$(CHMDIR) -I$(OD)/$(CHMDIR)

ACDC_OPTS = -ffree-line-length-none -cpp -J$(OD)/$(BACDC) -I$(OD)/$(BACDC) -fcheck=all -ffpe-trap=invalid,zero,overflow -O2

CHEM_OBJECTS = $(addprefix $(OD)/$(CHMDIR)/, second_Precision.o second_Parameters.o second_Function.o second_Global.o \
								second_Initialize.o second_reactivity.o second_Monitor.o second_Util.o second_JacobianSP.o \
								second_LinearAlgebra.o second_Jacobian.o second_Rates.o second_Integrator.o second_Model.o second_Main.o)

BOX_OBJECTS = $(addprefix $(OD)/, constants.o auxillaries.o input.o chemistry.o \
								psd_scheme.o aerosol_dynamics.o output.o custom_functions.o)

PSD_OBJECTS = constants.o input.o chemistry.o

# AEROSOL_OBJECTS = constants.o input.o auxillaries.o

ACDC_OBJECTS = $(addprefix $(OD)/$(BACDC)/, dvode.o solution_settings_new.o $(foreach n, $(n_acdc),acdc_system_0x$(n).o \
acdc_simulation_setup_0x$(n).o acdc_equations_0x$(n).o driver_0x$(n).o get_acdc_J_0x$(n).o))

# Main target ==========================================================================================================
all: arcabox.exe

# Version information ==================================================================================================
version:
	@echo \'$(VERSION)\'

# Linking ==============================================================================================================
arcabox.exe: $(OD)/arcabox.o $(BOX_OBJECTS) $(CHEM_OBJECTS) $(ACDC_OBJECTS) $(PSD_OBJECTS)
	$(F90) $(BOX_OPTS) $^ -o $@ $(NETLIBS)

test:
		@echo ${BOX_OPTS}

# Compiling ============================================================================================================

# Main program =========================================================================================================
$(OD)/arcabox.o: ARCA_main.f90 $(CHEM_OBJECTS) $(ACDC_OBJECTS) $(BOX_OBJECTS) $(PSD_OBJECTS)
	 $(F90) $(BOX_OPTS) -c $< -o $@

# Main model files =====================================================================================================
$(OD)/%.o: %.f90
	$(F90) $(BOX_OPTS) -c $< -o $@ $(NETLIBS)

# ACDC systems =========================================================================================================

$(OD)/$(BACDC)/get_acdc_J_0x%.o: get_acdc_J_0x%.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/driver_0x%.o: driver_acdc_J_0x%.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/acdc_equations_0x%.o: acdc_equations_0x%.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/acdc_simulation_setup_0x%.o: acdc_simulation_setup_0x%.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/acdc_system_%.o: acdc_system_%.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/solution_settings_new.o: $(SRCDIR)/ACDC/solvers/solution_settings_new.f90
	$(F90) $(ACDC_OPTS) -c $< -o $@

$(OD)/$(BACDC)/dvode.o: $(SRCDIR)/ACDC/solvers/dvode.f
	$(F90) $(ACDC_OPTS) -std=legacy -c $< -o $@

# KPP chemistry ========================================================================================================

$(OD)/$(CHMDIR)/%.o: $(SRCDIR)/chemistry/$(CHMDIR)/%.f90
	 $(F90) $(CHEM_OPTS) -c $< -o $@

BOX_MODS = $(BOX_OBJECTS:.o=.mod)
ACDC_MODS = $(ACDC_OBJECTS:.o=.mod)

# Cleaning =============================================================================================================
# 'clean' doesn't remove chemistry and acdc object files, since it takes very long time to compile them.
# 'cleanmain' cleans all but chemistry modules
# 'clean_current_chemistry' cleans all other than unused chemistry modules.
# 'cleaneverything' cleans everything, including all (in use or not) chemistry modules.

cleanoneacdc:
	-@cd $(OD)/$(BACDC) ; rm *0x$(ACDCTARG).o *0x$(ACDCTARG).mod        2>/dev/null || true

clean:
	-@rm $(BOX_OBJECTS) $(BOX_MODS) 2>/dev/null || true
	-@cd $(OD) ; rm arcabox.o   2>/dev/null || true
	-@rm arcabox.exe                2>/dev/null || true

cleaneverything:
	-@cd $(OD) ; rm -r *        2>/dev/null || true
	-@rm arcabox.exe                2>/dev/null || true

cleanmain:
	-@cd $(OD) ; rm *.o *.mod        2>/dev/null || true
	-@rm -r $(OD)/$(BACDC)        2>/dev/null || true
	-@rm arcabox.exe                2>/dev/null || true

clean_current_chemistry:
	-@rm $(BOX_OBJECTS) $(BOX_MODS) 2>/dev/null || true
	-@cd $(OD)/$(CHMDIR) ; rm *.mod *.o    2>/dev/null || true
	-@cd $(OD) ; rm arcabox.o    					 2>/dev/null || true
	-@rm arcabox.exe                					 2>/dev/null || true
