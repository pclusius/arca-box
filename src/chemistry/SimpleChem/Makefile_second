#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: Set here the F90 compiler and options
#       Pedefined compilers: INTEL, PGF, HPUX, LAHEY
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Pick a default compiler if not supplied
ifndef COMPILER
#COMPILER = LAHEY
#COMPILER = INTEL
#COMPILER = PGF
#COMPILER = HPUX
COMPILER = GFORTRAN
endif

FC_LAHEY   = lf95
# More aggressive for production runs:
#FOPT_LAHEY = -Cpp --pca -O
# More checking for debugging:
FOPT_LAHEY = -Cpp --chk a,e,s,u --pca --ap -O0 -g --trap --trace --chkglobal

FC_INTEL   = ifort
# More aggressive for production runs:
#FOPT_INTEL = -cpp -O -fp-model precise -pc80 -prec_div
# More checking for debugging:
FOPT_INTEL = -cpp -O0 -fp-model strict -implicitnone -ftrapuv \
              -debug all -check all -warn all -g

FC_PGF     = pgf90
# More aggressive for production runs:
FOPT_PGF   = -Mpreprocess -O -fast -pc 80 -Kieee
# More checking for debugging:
#FOPT_PGF   = -Mpreprocess -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk \
#             -Ktrap=fp -pc 80 -Kieee

FC_HPUX    = f90
FOPT_HPUX  = -O -u +Oall +check=on

FC_GFORTRAN     = gfortran
FOPT_GFORTRAN   = -cpp -O -g -frecursive

# define FULL_ALGEBRA for non-sparse integration
FC   = $(FC_$(COMPILER))
FOPT = $(FOPT_$(COMPILER)) # -DFULL_ALGEBRA

LIBS =
#LIBS = -llapack -lblas

#############################################################################
# Test if various files are found on disk or not
# so that we can include/exclude them from the Make process
#############################################################################

# JacobianSP
HAS_JAC_SP =0
ifeq ($(shell test -f second_JacobianSP.f90 && echo y),y)
  HAS_JAC_SP =1
endif

# Jacobian
HAS_JAC = 0
ifeq ($(shell test -f second_Jacobian.f90 && echo y),y)
  HAS_JAC = 1
endif

# HessianSP
HAS_HES_SP = 0
ifeq ($(shell test -f second_HessianSP.f90 && echo y),y)
  HAS_HES_SP = 1
endif

# Hessian
HAS_HES=0
ifeq ($(shell test -f second_Hessian.f90 && echo y),y)
  HAS_HES = 1
endif

# StoichiomSP
HAS_STM_SP = 0
ifeq ($(shell test -f  second_StoichiomSP.f90 && echo y),y)
  HAS_STM_SP=1
endif

# Stoichiom
HAS_STM = 0
ifeq ($(shell test -f  second_Stoichiom.f90 && echo y),y)
  HAS_STM=1
endif

# If an external rates module has been supplied,
# also define the correspoinding object file
ifdef EXTERNAL_RATES_F90
  EXTERNAL_RATES_OBJ := $(EXTERNAL_RATES_F90:.f90=.o)
  EXTERNAL_RATES_OBJ := $(EXTERNAL_RATES_OBJ:.F90=.o)
endif

#############################################################################
# Construct lists of objects and sources
#############################################################################

# Command to create Matlab mex gateway routines
# Note: use $(FC) as the mex Fortran compiler
MEX  = mex

# NOTE: Allow for an external module to be USE-d by F90_Rates
# by specifying the relevant environment variables.
GENSRC = second_Precision.f90  second_Parameters.f90  \
         second_Global.f90     $(EXTERNAL_RATES_F90)
GENOBJ = second_Precision.o    second_Parameters.o    \
         second_Global.o       $(EXTERNAL_RATES_OBJ)

FUNSRC = second_Function.f90
FUNOBJ = second_Function.o

JACSRC   =
JACOBJ   =
JACSPOBJ =
ifeq ($(HAS_JAC_SP),1)
  JACSRC   += second_JacobianSP.f90
  JACOBJ   += second_JacobianSP.o
  JACSPOBJ += second_JacobianSP.o
endif
ifeq ($(HAS_JAC),1)
  JACSRC   += second_Jacobian.f90
  JACOBJ   += second_Jacobian.o
endif

HESSRC   =
HESOBJ   =
HESSPOBJ =
ifeq ($(HAS_HES_SP),1)
  HESSRC   += second_HessianSP.f90
  HESOBJ   += second_HessianSP.o
  HESSPOBJ += second_HessianSP.o
endif
ifeq ($(HAS_HES),1)
  HESSRC   += second_Hessian.f90
  HESOBJ   += second_Hessian.o
endif

STMSRC   =
STMOBJ   =
STMSPOBJ =
ifeq ($(HAS_STM_SP),1)
  STMSRC   += second_StoichiomSP.f90
  STMOBJ   += second_StoichiomSP.o
  STMSPOBJ += second_StoichiomSP.o
endif
ifeq ($(HAS_HES),1)
  HESSRC   += second_Stoichiom.f90
  HESOBJ   += second_Stoichiom.o
endif

UTLSRC = second_Rates.f90 second_Util.f90 second_Monitor.f90
UTLOBJ = second_Rates.o   second_Util.o   second_Monitor.o

LASRC  = second_LinearAlgebra.f90
LAOBJ  = second_LinearAlgebra.o

STOCHSRC = second_Stochastic.f90
STOCHOBJ = second_Stochastic.o

MAINSRC = second_Main.f90        second_Initialize.f90 \
          second_Integrator.f90  second_Model.f90
MAINOBJ = second_Main.o          second_Initialize.o   \
          second_Integrator.o    second_Model.o

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       objects needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALLOBJ = $(GENOBJ) $(FUNOBJ) $(JACOBJ) $(HESOBJ) $(STMOBJ) \
	 $(UTLOBJ) $(LAOBJ)

#############################################################################
# Makefile targets and rules
#############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       executables needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
all:    exe

exe:	$(ALLOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(MAINOBJ) $(LIBS) -o second.exe

stochastic:$(ALLOBJ) $(STOCHOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(STOCHOBJ) $(MAINOBJ) $(LIBS) \
	-o second_stochastic.exe

mex:    $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O second_mex_Fun.f90     $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O second_mex_Jac_SP.f90  $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O second_mex_Hessian.f90 $(ALLOBJ)

clean:
	rm -f *.o *.mod \
	second*.dat second.exe second*.mexglx \
	second.log

distclean:
	rm -f *.o *.mod \
	second*.dat second.exe second.log \
	second_*.f90 second_*.f90 second_*.mexglx \
	results*.m *.dat

second_Precision.o: second_Precision.f90
	$(FC) $(FOPT) -c $<

second_Parameters.o: second_Parameters.f90 second_Precision.o
	$(FC) $(FOPT) -c $<

second_Monitor.o: second_Monitor.f90 second_Precision.o
	$(FC) $(FOPT) -c $<

second_Global.o: second_Global.f90 second_Parameters.o second_Precision.o
	$(FC) $(FOPT) -c $<

second_Initialize.o: second_Initialize.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_Function.o: second_Function.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_Stochastic.o: second_Stochastic.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_JacobianSP.o: second_JacobianSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_Jacobian.o: second_Jacobian.f90 $(GENOBJ) $(JACSPOBJ)
	$(FC) $(FOPT) -c $<

second_LinearAlgebra.o: second_LinearAlgebra.f90 $(GENOBJ) $(JACSPOBJ)
	$(FC) $(FOPT) -c $<

second_Rates.o: second_Rates.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_HessianSP.o: second_HessianSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_Hessian.o:  second_Hessian.f90 $(GENOBJ) $(HESSPOBJ)
	$(FC) $(FOPT) -c $<

second_StoichiomSP.o: second_StoichiomSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

second_Stoichiom.o: second_Stoichiom.f90 $(GENOBJ) $(STMSPOBJ)
	$(FC) $(FOPT) -c $<

second_Util.o: second_Util.f90 $(GENOBJ) second_Monitor.o
	$(FC) $(FOPT) -c $<

second_Main.o: second_Main.f90  $(ALLOBJ) \
                 second_Initialize.o second_Model.o second_Integrator.o
	$(FC) $(FOPT) -c $<

second_Model.o: second_Model.f90 $(ALLOBJ) second_Integrator.o
	$(FC) $(FOPT) -c $<

second_Integrator.o: second_Integrator.f90 $(ALLOBJ)
	$(FC) $(FOPT) -c $<

# Define rule for a user-defined module that gets USE-d by F90_Rates.
# This rule is only applied if both variables are not blank.
ifdef EXTERNAL_RATES_F90
ifdef EXTERNAL_RATES_OBJ
$(EXTERNAL_RATES_OBJ): $(EXTERNAL_RATES_F90) second_Precision.o second_Global.o second_Parameters.o
	$(FC) $(FOPT) -c $<
endif
endif
